{"version":3,"sources":["action/todoAction.js","components/TodoList.js","components/addTodos.js","App.js","serviceWorker.js","reducers/RootReducer.js","index.js"],"names":["creatDate","date","Date","currentDate","toISOString","slice","currentTime","getHours","getMinutes","getSeconds","console","log","TodoList","state","showDetails","isDone","list","props","handleClick","id","deleteTodo","handleChange","setState","nextProps","this","sortedTdo","sort","a","b","key1","creationDate","key2","className","length","map","todo","key","onClick","todoContent","style","display","description","toString","src","img","alt","Component","connect","todosList","dispatch","type","AddTodos","getId","replace","c","r","Math","random","formatDate","e","target","value","handleDescriptionChange","handleSbumit","preventDefault","addTodo","bind","onSubmit","htmlFor","placeholder","onChange","rows","fetch","then","response","json","data","payload","file","catch","err","App","Boolean","window","location","hostname","match","intState","rootReducer","action","todos","filter","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2ce59a2.chunk.js","sourcesContent":["export const deleteTodo = (id) => {\n    return {\n        type: 'DELETE_TODO',\n        id: id\n    }\n}\n\n// export const addTodo = (todo, description, creationDate,img, id) => {\n//     return {\n//         type: 'ADD_TODO',\n//         payload: {\n//             todoContent: todo,\n//             description: description,\n//             creationDate: creationDate,\n//             img: img,\n//             id: id\n//         } \n//     }\n// } \n\n\nconst creatDate = () => {\n    let date = new Date();\n    let currentDate = date.toISOString().slice(0,10);\n    let currentTime = date.getHours() + ':' + date.getMinutes()+ ':' +date.getSeconds();\n    console.log(currentDate+ \" \" +currentTime)\n    return currentDate+ \" \" +currentTime\n}\n\n\n\nexport const addTodo = (todo) => {\n    return (dispatch) => {\n        fetch('http://aws.random.cat/meow')\n            .then(response => response.json())\n            .then(data=> (\n                dispatch(\n                    {\n                        type: 'ADD_TODO',\n                        payload: {\n                            todoContent: todo.todoContent,\n                            description: todo.description,\n                            creationDate: creatDate(),\n                            img: data.file,\n                            id: todo.id\n                        }\n                    }\n                )\n            ))\n            .catch(err => {dispatch({type: 'ADD_TODO_ERROR', err})\n        });\n    }\n}\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { deleteTodo } from '../action/todoAction';\nimport '../css/componentsStyleSheet/TodoList.css';\nclass TodoList extends Component {\n\n    state = {\n        showDetails: false,\n        isDone: true,\n        list:this.props.TodoList\n    }\n    \n    handleClick = (id) => {\n        this.props.deleteTodo(id) \n    }\n    \n\n    \n    componentWillReceiveProps(nextProps)  {\n        if(nextProps.TodoList !== this.props.TodoList){\n            const sortedTdo =  \n                nextProps.TodoList.sort(function (a, b) {\n                let key1 = a.creationDate;\n                let key2 = b.creationDate;\n\n                if (key1 > key2) {\n                    return -1;\n                } else if (key1 === key2) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            })\n            this.setState({ list: sortedTdo });\n        }\n    }\n\n    handleChange = () => {\n\n        if (this.state.showDetails === false) {\n            this.setState({showDetails: true})\n        } \n        if (this.state.showDetails === true ) {\n            this.setState({showDetails: false})\n        }\n    }\n    \n    \n    render() {\n        // console.log(this.props.TodoList)\n        console.log('balabla  ', this.state.list)\n        return (\n            <div className='todos'>\n                {this.state.list.length ? (\n                    \n                    this.state.list.map(todo => {\n                        return (\n                            <div className=\"todo-list\" key={todo.id}>\n                                <span className=\"todo-item\">\n                                    <p className=\"todo-title\" onClick={this.handleChange}>{todo.todoContent}</p>\n                                    <button className=\"delete-button\" onClick={()=>this.handleClick(todo.id)}>delete</button>\n                                </span>\n                                <div className=\"detaills\" style={{display: this.state.showDetails ? ('block') : ('none')  }}>\n                                    <h4>Description:</h4>\n                                    <p>{todo.description}</p>\n                                    <h4>Created:</h4>\n                                    <p>{todo.creationDate.toString()}</p>\n                                    <img className=\"todo-img\" src={todo.img} alt=\"\"/>\n                                </div>\n                            </div>\n                        )\n                    })\n                ) : (\n                    <p>There is nothing to do</p>\n                )\n            }\n            </div>\n\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n      todosList: state.todosList\n    }\n  }\n\n// dispatch action from this component\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      deleteTodo: (id) => { dispatch(deleteTodo(id)) }\n    }\n  }\n\nexport default connect(mapStateToProps ,mapDispatchToProps)(TodoList);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../action/todoAction';\nimport '../css/componentsStyleSheet/addTodos.css';\n\n\n// let randomId = require(\"uuid/v4\")\n\n\nclass AddTodos extends Component {\n\n    constructor(props) {\n        super(props)\n        this.getId = this.getId.bind(this);\n    }\n    state = {\n        todoContent:'',\n        description: '',\n        creationDate: '',\n        img:'',\n        id : this.getId\n    }\n\n\n    \n    getId = () => {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);\n            return v.toString(16);\n        });\n    }\n\n    formatDate = () => {\n        let date = new Date();\n\t    let currentDate = date.toISOString().slice(0,10);\n        let currentTime = date.getHours() + ':' + date.getMinutes()+ ':' +date.getSeconds();\n        console.log(currentDate+ \" \" +currentTime)\n\t    return currentDate+ \" \" +currentTime\n    }\n\n\n    handleChange = (e) => {\n        this.setState({\n            todoContent : e.target.value\n        })\n        \n    }\n    handleDescriptionChange= (e) => {\n        this.setState({\n            description: e.target.value\n        })\n    }\n    \n    \n    handleSbumit = (e) => {\n        e.preventDefault();\n        this.setState({\n            id: this.getId(),\n            \n        })\n\n        // // Make sure that we have a new unique id \n        // if (this.state.id === this.getId()){\n        //     this.setState({\n        //         id: this.getId(),\n        //         // creationDate: this.formatDate()\n        //     }) \n        // } else {\n        //     this.setState({\n        //         id: this.getId(),\n        //         // creationDate: this.formatDate()\n        //     })\n        // }\n        // this.setState({\n        //     creationDate: this.formatDate()\n        // })\n        // fetch('http://aws.random.cat/meow')\n        //     .then(response => response.json())\n        //     .then(data => this.setState({img: data.file}))\n        //     .catch(err => console.log(err));\n\n        // this.props.addTodo(this.state.todoContent, this.state.description, this.state.creationDate, this.state.img, this.state.id);\n        this.props.addTodo(this.state);\n        // this.props.addTodo(this.state)\n\n        //reset the input field after submit\n        this.setState({\n            todoContent:'',\n            description: ''\n        })\n    }\n    render() {\n        return (\n            <div>\n                <form className=\"todo-form\" onSubmit={this.handleSbumit}>\n                    <label htmlFor=\"addTodo\" className=\"addTodo\" ><h3>Add Todo's:</h3></label>\n                    <input type=\"text\" placeholder=\"enter task\"  id=\"addTodo\" className=\"addTodo-input\" onChange={this.handleChange} value={this.state.todoContent}></input>\n                      \n                    <label htmlFor=\"addDescription\" className=\"addDescription\"><h3>Add Description:</h3></label>\n                    <textarea id=\"addDescription\" rows=\"5\" placeholder=\"enter a description\" onChange={this.handleDescriptionChange} value={this.state.description}></textarea>\n                    <button className=\"submit-button\">add</button>\n                </form>\n                \n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      todosList: state.todosList\n    }\n  }\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        // addTodo: (todo, description, creationDate, img, id) => { dispatch(addTodo(todo, description, creationDate,img, id)) }\n        addTodo: (todo) => { dispatch(addTodo(todo))}\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTodos);","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport AddTodos from './components/addTodos';\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n  // state = {\n  //   todosList:[\n  //     {todoContent: \"finish this feature\", id: 1},\n  //     {todoContent: \"start the next one\", id: 2},\n  //   ]\n  // }\n  \n  // generateId  = () => {\n  //   const listId = [];\n  //   this.props.state.todosList.map(item => listId.push(item.id))\n  //   let newId = Math.random();\n  //   if (listId.includes(newId)) {\n  //   \tnewId = newId +1\n  //   \treturn newId;\n  //   } else {\n  //   \treturn newId;\n  //   }\n  // }\n\n  // addTodo = (todo) => {\n  //   todo.id = this.generateId();\n  //   let todos = [...this.props.state.todosList, todo]\n  //   this.setState({\n  //     todosList: todos\n  //   })\n  // }\n\n  \n  render() {\n    return (\n      <div>\n        <AddTodos /> \n        <h1>Todo's List</h1>\n        <TodoList TodoList={this.props.todosList}/>\n      </div>\n    );\n  }\n}\n\n// get data from the store\nconst mapStateToProps = (state) => {\n  return {\n    todosList: state.todosList\n  }\n}\n\n\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const formatDate = () => {\n    let date = new Date();\n    let currentDate = date.toISOString().slice(0,10);\n    let currentTime = date.getHours() + ':' + date.getMinutes()+ ':' +date.getSeconds();\n    console.log(currentDate+ \" \" +currentTime)\n    return currentDate+ \" \" +currentTime\n}\n\nconst intState = {\n    todosList: [\n        {todoContent: \"static todo 1\", description:\"do something\", creationDate: formatDate(),img:\"\", id: 1},\n        {todoContent: \"static todo 2\", description:\"do something\", creationDate: formatDate(),img:\"\", id: 2},\n    ]\n}\n\nconst rootReducer = (state= intState, action) => {\n    if(action.type === 'DELETE_TODO') {\n        // console.log(action);\n        let todos = state.todosList.filter(todo => {\n            return todo.id !== action.id \n          });\n          return {\n              ...state,\n              todosList: todos\n          }\n        }\n    if (action.type === 'ADD_TODO') {\n        console.log(action.payload)\n        return {\n            ...state,\n            todosList: [ ...state.todosList, action.payload],\n\n        }\n    }\n    if (action.type === 'ADD_TODO') {\n        console.log('add todo error', action.err)\n        return state;\n    }\n    // console.log(state)\n    return state;\n}\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/RootReducer';\nimport thunk from 'redux-thunk';\n\n\n\nconst store = createStore(rootReducer,\n    //We use compose func to use muliple enhancers   \n    compose(\n        applyMiddleware(thunk)\n        )\n    );\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}